{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-03T12:21:20.785239Z",
      "credit": [
        "Yaniv Nizry",
        "Michał Bentkowski"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
      "disclosureTime": "2021-02-02T17:58:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.3.0"
      ],
      "id": "SNYK-PYTHON-BLEACH-1069893",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vv2x-vrpj-qqpq"
        ],
        "CVE": [
          "CVE-2021-23980"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-31T09:49:55.322672Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-03T16:55:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
        },
        {
          "title": "Mutation XSS",
          "url": "https://cure53.de/fp170.pdf"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.3.0)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-25T12:46:51.433615Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
      "disclosureTime": "2020-02-19T12:49:40Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "3.1.1"
      ],
      "id": "SNYK-PYTHON-BLEACH-552160",
      "identifiers": {
        "CWE": [
          "CWE-89"
        ],
        "GHSA": [
          "GHSA-q65m-pv3f-wr5r"
        ],
        "CVE": [
          "CVE-2020-6802"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-25T08:14:32.725430Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-25T12:50:05Z",
      "references": [
        {
          "title": "Bugzilla",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
        },
        {
          "title": "mXSS Research Paper",
          "url": "https://cure53.de/fp170.pdf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:14.113830Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-03-25T08:20:23.728137Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
      "disclosureTime": "2020-03-25T08:20:21Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.2"
      ],
      "id": "SNYK-PYTHON-BLEACH-561119",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-m6xf-fq7q-8743"
        ],
        "CVE": [
          "CVE-2020-6816"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-22T13:32:04.003890Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-25T09:23:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
        },
        {
          "title": "PoC",
          "url": "https://youtu.be/lNB20mb3OXk?t=947"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:46.290799Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.2)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T14:21:33.630126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
      "disclosureTime": "2020-03-31T06:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.4"
      ],
      "id": "SNYK-PYTHON-BLEACH-561754",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vqhp-cxgc-6wmm"
        ],
        "CVE": [
          "CVE-2020-6817"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-31T15:17:42.856112Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T15:17:42.854616Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.4)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-03T12:21:20.785239Z",
      "credit": [
        "Yaniv Nizry",
        "Michał Bentkowski"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
      "disclosureTime": "2021-02-02T17:58:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.3.0"
      ],
      "id": "SNYK-PYTHON-BLEACH-1069893",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vv2x-vrpj-qqpq"
        ],
        "CVE": [
          "CVE-2021-23980"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-31T09:49:55.322672Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-03T16:55:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
        },
        {
          "title": "Mutation XSS",
          "url": "https://cure53.de/fp170.pdf"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.3.0)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-25T12:46:51.433615Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
      "disclosureTime": "2020-02-19T12:49:40Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "3.1.1"
      ],
      "id": "SNYK-PYTHON-BLEACH-552160",
      "identifiers": {
        "CWE": [
          "CWE-89"
        ],
        "GHSA": [
          "GHSA-q65m-pv3f-wr5r"
        ],
        "CVE": [
          "CVE-2020-6802"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-25T08:14:32.725430Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-25T12:50:05Z",
      "references": [
        {
          "title": "Bugzilla",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
        },
        {
          "title": "mXSS Research Paper",
          "url": "https://cure53.de/fp170.pdf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:14.113830Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-03-25T08:20:23.728137Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
      "disclosureTime": "2020-03-25T08:20:21Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.2"
      ],
      "id": "SNYK-PYTHON-BLEACH-561119",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-m6xf-fq7q-8743"
        ],
        "CVE": [
          "CVE-2020-6816"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-22T13:32:04.003890Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-25T09:23:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
        },
        {
          "title": "PoC",
          "url": "https://youtu.be/lNB20mb3OXk?t=947"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:46.290799Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.2)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T14:21:33.630126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
      "disclosureTime": "2020-03-31T06:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.4"
      ],
      "id": "SNYK-PYTHON-BLEACH-561754",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vqhp-cxgc-6wmm"
        ],
        "CVE": [
          "CVE-2020-6817"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-31T15:17:42.856112Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T15:17:42.854616Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.4)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-03T12:21:20.785239Z",
      "credit": [
        "Yaniv Nizry",
        "Michał Bentkowski"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
      "disclosureTime": "2021-02-02T17:58:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.3.0"
      ],
      "id": "SNYK-PYTHON-BLEACH-1069893",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vv2x-vrpj-qqpq"
        ],
        "CVE": [
          "CVE-2021-23980"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-31T09:49:55.322672Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-03T16:55:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
        },
        {
          "title": "Mutation XSS",
          "url": "https://cure53.de/fp170.pdf"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.3.0)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-25T12:46:51.433615Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
      "disclosureTime": "2020-02-19T12:49:40Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "3.1.1"
      ],
      "id": "SNYK-PYTHON-BLEACH-552160",
      "identifiers": {
        "CWE": [
          "CWE-89"
        ],
        "GHSA": [
          "GHSA-q65m-pv3f-wr5r"
        ],
        "CVE": [
          "CVE-2020-6802"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-25T08:14:32.725430Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-25T12:50:05Z",
      "references": [
        {
          "title": "Bugzilla",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
        },
        {
          "title": "mXSS Research Paper",
          "url": "https://cure53.de/fp170.pdf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:14.113830Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-03-25T08:20:23.728137Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
      "disclosureTime": "2020-03-25T08:20:21Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.2"
      ],
      "id": "SNYK-PYTHON-BLEACH-561119",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-m6xf-fq7q-8743"
        ],
        "CVE": [
          "CVE-2020-6816"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-22T13:32:04.003890Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-25T09:23:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
        },
        {
          "title": "PoC",
          "url": "https://youtu.be/lNB20mb3OXk?t=947"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:46.290799Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.2)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T14:21:33.630126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
      "disclosureTime": "2020-03-31T06:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.4"
      ],
      "id": "SNYK-PYTHON-BLEACH-561754",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vqhp-cxgc-6wmm"
        ],
        "CVE": [
          "CVE-2020-6817"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-31T15:17:42.856112Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T15:17:42.854616Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.4)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-03T12:21:20.785239Z",
      "credit": [
        "Yaniv Nizry",
        "Michał Bentkowski"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
      "disclosureTime": "2021-02-02T17:58:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.3.0"
      ],
      "id": "SNYK-PYTHON-BLEACH-1069893",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vv2x-vrpj-qqpq"
        ],
        "CVE": [
          "CVE-2021-23980"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-31T09:49:55.322672Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-03T16:55:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
        },
        {
          "title": "Mutation XSS",
          "url": "https://cure53.de/fp170.pdf"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.3.0)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-25T12:46:51.433615Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
      "disclosureTime": "2020-02-19T12:49:40Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "3.1.1"
      ],
      "id": "SNYK-PYTHON-BLEACH-552160",
      "identifiers": {
        "CWE": [
          "CWE-89"
        ],
        "GHSA": [
          "GHSA-q65m-pv3f-wr5r"
        ],
        "CVE": [
          "CVE-2020-6802"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-25T08:14:32.725430Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-25T12:50:05Z",
      "references": [
        {
          "title": "Bugzilla",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
        },
        {
          "title": "mXSS Research Paper",
          "url": "https://cure53.de/fp170.pdf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:14.113830Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-03-25T08:20:23.728137Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
      "disclosureTime": "2020-03-25T08:20:21Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.2"
      ],
      "id": "SNYK-PYTHON-BLEACH-561119",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-m6xf-fq7q-8743"
        ],
        "CVE": [
          "CVE-2020-6816"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-22T13:32:04.003890Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-25T09:23:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
        },
        {
          "title": "PoC",
          "url": "https://youtu.be/lNB20mb3OXk?t=947"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:46.290799Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.2)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T14:21:33.630126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
      "disclosureTime": "2020-03-31T06:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.4"
      ],
      "id": "SNYK-PYTHON-BLEACH-561754",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vqhp-cxgc-6wmm"
        ],
        "CVE": [
          "CVE-2020-6817"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-31T15:17:42.856112Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T15:17:42.854616Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.4)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-03T12:21:20.785239Z",
      "credit": [
        "Yaniv Nizry",
        "Michał Bentkowski"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
      "disclosureTime": "2021-02-02T17:58:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.3.0"
      ],
      "id": "SNYK-PYTHON-BLEACH-1069893",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vv2x-vrpj-qqpq"
        ],
        "CVE": [
          "CVE-2021-23980"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-31T09:49:55.322672Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-03T16:55:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
        },
        {
          "title": "Mutation XSS",
          "url": "https://cure53.de/fp170.pdf"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.3.0)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-25T12:46:51.433615Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
      "disclosureTime": "2020-02-19T12:49:40Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "3.1.1"
      ],
      "id": "SNYK-PYTHON-BLEACH-552160",
      "identifiers": {
        "CWE": [
          "CWE-89"
        ],
        "GHSA": [
          "GHSA-q65m-pv3f-wr5r"
        ],
        "CVE": [
          "CVE-2020-6802"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-25T08:14:32.725430Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-25T12:50:05Z",
      "references": [
        {
          "title": "Bugzilla",
          "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
        },
        {
          "title": "mXSS Research Paper",
          "url": "https://cure53.de/fp170.pdf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:14.113830Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-03-25T08:20:23.728137Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
      "disclosureTime": "2020-03-25T08:20:21Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.2"
      ],
      "id": "SNYK-PYTHON-BLEACH-561119",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-m6xf-fq7q-8743"
        ],
        "CVE": [
          "CVE-2020-6816"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-22T13:32:04.003890Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-25T09:23:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
        },
        {
          "title": "PoC",
          "url": "https://youtu.be/lNB20mb3OXk?t=947"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:10:46.290799Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.2)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T14:21:33.630126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
      "disclosureTime": "2020-03-31T06:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.4"
      ],
      "id": "SNYK-PYTHON-BLEACH-561754",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vqhp-cxgc-6wmm"
        ],
        "CVE": [
          "CVE-2020-6817"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-03-31T15:17:42.856112Z",
      "moduleName": "bleach",
      "packageManager": "pip",
      "packageName": "bleach",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T15:17:42.854616Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,3.1.4)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "bleach@2.1.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "bleach",
      "version": "2.1.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "jupyter-console@6.4.2",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "jupyter-console@6.4.2",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "qtconsole@5.3.1",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-20T13:49:08.236926Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
      "disclosureTime": "2022-01-20T11:03:37Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.16.3",
        "7.31.1",
        "8.0.1"
      ],
      "id": "SNYK-PYTHON-IPYTHON-2348630",
      "identifiers": {
        "CWE": [
          "CWE-250",
          "CWE-279"
        ],
        "GHSA": [
          "GHSA-pq7m-3gw7-gq5x"
        ],
        "CVE": [
          "CVE-2022-21699"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-01-20T16:20:34.775372Z",
      "moduleName": "ipython",
      "packageManager": "pip",
      "packageName": "ipython",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-20T16:20:34.772251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
        },
        {
          "title": "IPython Release Notes",
          "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-03-26T01:11:09.713833Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[, 7.16.3)",
          "[7.17.0, 7.31.1)",
          "[8.0.0, 8.0.1)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "ipykernel@5.0.0",
        "ipython@7.19.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ipython",
      "version": "7.19.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "flask@1.0.2",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "flask@1.0.2",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-09-25T17:30:26.286074Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
      "disclosureTime": "2020-09-25T17:29:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.11.3"
      ],
      "id": "SNYK-PYTHON-JINJA2-1012994",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-g3rq-g295-4j3m"
        ],
        "CVE": [
          "CVE-2020-28493"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2021-03-21T14:24:36.107041Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-01T19:52:17Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pallets/jinja/pull/1343"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-16T10:16:22.250265Z"
        },
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-05-03T22:33:08.900704Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-09T01:11:30.794115Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.11.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-04-07T10:24:16.310959Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
      "disclosureTime": "2019-04-07T00:42:43Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.10.1"
      ],
      "id": "SNYK-PYTHON-JINJA2-174126",
      "identifiers": {
        "CWE": [
          "CWE-265"
        ],
        "CVE": [
          "CVE-2019-10906"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-12-14T14:40:53.288704Z",
      "moduleName": "jinja2",
      "packageManager": "pip",
      "packageName": "jinja2",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T00:42:43Z",
      "references": [
        {
          "title": "Release Notes",
          "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Escape",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
          "cvssV3BaseScore": 8.1,
          "severity": "high",
          "modificationTime": "2022-05-04T00:39:31.724880Z"
        },
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 9,
          "severity": "critical",
          "modificationTime": "2022-05-31T20:10:02.225006Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
          "cvssV3BaseScore": 8.6,
          "severity": "high",
          "modificationTime": "2022-01-03T17:53:56.041656Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.10.1)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "jinja2@2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "jinja2",
      "version": "2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-07-04T10:34:28.640492Z",
      "credit": [
        "unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `ASTERISK_EMPHASIS` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mistune` to version 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2)\n",
      "disclosureTime": "2022-07-04T10:31:50Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.3"
      ],
      "id": "SNYK-PYTHON-MISTUNE-2940625",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-34749"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-07-04T16:13:03.320562Z",
      "moduleName": "mistune",
      "packageManager": "pip",
      "packageName": "mistune",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-07-04T16:13:03.318906Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-08-03T01:10:21.836125Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.0.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1",
        "mistune@0.8.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mistune",
      "version": "0.8.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-07-04T10:34:28.640492Z",
      "credit": [
        "unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `ASTERISK_EMPHASIS` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mistune` to version 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2)\n",
      "disclosureTime": "2022-07-04T10:31:50Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.3"
      ],
      "id": "SNYK-PYTHON-MISTUNE-2940625",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-34749"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-07-04T16:13:03.320562Z",
      "moduleName": "mistune",
      "packageManager": "pip",
      "packageName": "mistune",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-07-04T16:13:03.318906Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-08-03T01:10:21.836125Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.0.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "mistune@0.8.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mistune",
      "version": "0.8.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-07-04T10:34:28.640492Z",
      "credit": [
        "unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `ASTERISK_EMPHASIS` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mistune` to version 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2)\n",
      "disclosureTime": "2022-07-04T10:31:50Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.3"
      ],
      "id": "SNYK-PYTHON-MISTUNE-2940625",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-34749"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-07-04T16:13:03.320562Z",
      "moduleName": "mistune",
      "packageManager": "pip",
      "packageName": "mistune",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-07-04T16:13:03.318906Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-08-03T01:10:21.836125Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.0.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "mistune@0.8.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mistune",
      "version": "0.8.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-07-04T10:34:28.640492Z",
      "credit": [
        "unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `ASTERISK_EMPHASIS` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mistune` to version 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2)\n",
      "disclosureTime": "2022-07-04T10:31:50Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.3"
      ],
      "id": "SNYK-PYTHON-MISTUNE-2940625",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-34749"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-07-04T16:13:03.320562Z",
      "moduleName": "mistune",
      "packageManager": "pip",
      "packageName": "mistune",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-07-04T16:13:03.318906Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-08-03T01:10:21.836125Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,2.0.3)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1",
        "mistune@0.8.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mistune",
      "version": "0.8.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-08-11T09:32:37.687900Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker can inject arbitrary HTML when generating HTML from a crafted notebook. The vulnerable points are:\r\n\r\nthe field \r\n\r\n- `notebook.metadata.language_info.pygments_lexer` \r\n\r\nthe nodes \r\n\r\n- `notebook.metadata.title` \r\n- `notebook.metadata.widgets` \r\n- `notebook.cell.metadata.tags` \r\n- `notebook.cell.output.svg_filename` \r\n- `output.metadata.filenames`\r\n- `cell.output.metadata.width`\r\n- `cell.output.metadata.height`\r\n\r\nand output data of the cells \r\n\r\n- `text/html`\r\n- `image/svg+xml`\r\n- `text/markdown`\r\n- `application/javascript`\r\n- `cell.output.data[\"images/png\"]` \r\n- `cell.output.data[\"images/jpeg\"]`\r\n- `output.metadata.filenames['image/png']`\r\n- `output.metadata.filenames['image/jpeg']`\r\n- `application/vnd.jupyter.widget-state+json`\r\n- `application/vnd.jupyter.widget-view+json`\r\n- `raw` type\r\n- `markdown` type\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `nbconvert` to version 6.3.0b0 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557)\n",
      "disclosureTime": "2022-08-10T17:51:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.3.0b0"
      ],
      "id": "SNYK-PYTHON-NBCONVERT-2979829",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-9jmq-rx5f-8jwq"
        ],
        "CVE": [
          "CVE-2021-32862"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-08-11T14:26:06.225922Z",
      "moduleName": "nbconvert",
      "packageManager": "pip",
      "packageName": "nbconvert",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-08-11T14:26:06.224202Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 5.4,
          "severity": "medium",
          "modificationTime": "2022-08-20T13:10:39.549285Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.3.0b0)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "nbconvert@5.6.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nbconvert",
      "version": "5.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-08-11T09:32:37.687900Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker can inject arbitrary HTML when generating HTML from a crafted notebook. The vulnerable points are:\r\n\r\nthe field \r\n\r\n- `notebook.metadata.language_info.pygments_lexer` \r\n\r\nthe nodes \r\n\r\n- `notebook.metadata.title` \r\n- `notebook.metadata.widgets` \r\n- `notebook.cell.metadata.tags` \r\n- `notebook.cell.output.svg_filename` \r\n- `output.metadata.filenames`\r\n- `cell.output.metadata.width`\r\n- `cell.output.metadata.height`\r\n\r\nand output data of the cells \r\n\r\n- `text/html`\r\n- `image/svg+xml`\r\n- `text/markdown`\r\n- `application/javascript`\r\n- `cell.output.data[\"images/png\"]` \r\n- `cell.output.data[\"images/jpeg\"]`\r\n- `output.metadata.filenames['image/png']`\r\n- `output.metadata.filenames['image/jpeg']`\r\n- `application/vnd.jupyter.widget-state+json`\r\n- `application/vnd.jupyter.widget-view+json`\r\n- `raw` type\r\n- `markdown` type\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `nbconvert` to version 6.3.0b0 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557)\n",
      "disclosureTime": "2022-08-10T17:51:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.3.0b0"
      ],
      "id": "SNYK-PYTHON-NBCONVERT-2979829",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-9jmq-rx5f-8jwq"
        ],
        "CVE": [
          "CVE-2021-32862"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-08-11T14:26:06.225922Z",
      "moduleName": "nbconvert",
      "packageManager": "pip",
      "packageName": "nbconvert",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-08-11T14:26:06.224202Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 5.4,
          "severity": "medium",
          "modificationTime": "2022-08-20T13:10:39.549285Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.3.0b0)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15",
        "nbconvert@5.6.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nbconvert",
      "version": "5.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-08-11T09:32:37.687900Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker can inject arbitrary HTML when generating HTML from a crafted notebook. The vulnerable points are:\r\n\r\nthe field \r\n\r\n- `notebook.metadata.language_info.pygments_lexer` \r\n\r\nthe nodes \r\n\r\n- `notebook.metadata.title` \r\n- `notebook.metadata.widgets` \r\n- `notebook.cell.metadata.tags` \r\n- `notebook.cell.output.svg_filename` \r\n- `output.metadata.filenames`\r\n- `cell.output.metadata.width`\r\n- `cell.output.metadata.height`\r\n\r\nand output data of the cells \r\n\r\n- `text/html`\r\n- `image/svg+xml`\r\n- `text/markdown`\r\n- `application/javascript`\r\n- `cell.output.data[\"images/png\"]` \r\n- `cell.output.data[\"images/jpeg\"]`\r\n- `output.metadata.filenames['image/png']`\r\n- `output.metadata.filenames['image/jpeg']`\r\n- `application/vnd.jupyter.widget-state+json`\r\n- `application/vnd.jupyter.widget-view+json`\r\n- `raw` type\r\n- `markdown` type\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `nbconvert` to version 6.3.0b0 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557)\n",
      "disclosureTime": "2022-08-10T17:51:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.3.0b0"
      ],
      "id": "SNYK-PYTHON-NBCONVERT-2979829",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-9jmq-rx5f-8jwq"
        ],
        "CVE": [
          "CVE-2021-32862"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-08-11T14:26:06.225922Z",
      "moduleName": "nbconvert",
      "packageManager": "pip",
      "packageName": "nbconvert",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-08-11T14:26:06.224202Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 5.4,
          "severity": "medium",
          "modificationTime": "2022-08-20T13:10:39.549285Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.3.0b0)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nbconvert",
      "version": "5.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-08-11T09:32:37.687900Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker can inject arbitrary HTML when generating HTML from a crafted notebook. The vulnerable points are:\r\n\r\nthe field \r\n\r\n- `notebook.metadata.language_info.pygments_lexer` \r\n\r\nthe nodes \r\n\r\n- `notebook.metadata.title` \r\n- `notebook.metadata.widgets` \r\n- `notebook.cell.metadata.tags` \r\n- `notebook.cell.output.svg_filename` \r\n- `output.metadata.filenames`\r\n- `cell.output.metadata.width`\r\n- `cell.output.metadata.height`\r\n\r\nand output data of the cells \r\n\r\n- `text/html`\r\n- `image/svg+xml`\r\n- `text/markdown`\r\n- `application/javascript`\r\n- `cell.output.data[\"images/png\"]` \r\n- `cell.output.data[\"images/jpeg\"]`\r\n- `output.metadata.filenames['image/png']`\r\n- `output.metadata.filenames['image/jpeg']`\r\n- `application/vnd.jupyter.widget-state+json`\r\n- `application/vnd.jupyter.widget-view+json`\r\n- `raw` type\r\n- `markdown` type\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `nbconvert` to version 6.3.0b0 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557)\n",
      "disclosureTime": "2022-08-10T17:51:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.3.0b0"
      ],
      "id": "SNYK-PYTHON-NBCONVERT-2979829",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-9jmq-rx5f-8jwq"
        ],
        "CVE": [
          "CVE-2021-32862"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-08-11T14:26:06.225922Z",
      "moduleName": "nbconvert",
      "packageManager": "pip",
      "packageName": "nbconvert",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-08-11T14:26:06.224202Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 5.4,
          "severity": "medium",
          "modificationTime": "2022-08-20T13:10:39.549285Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.3.0b0)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15",
        "nbconvert@5.6.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nbconvert",
      "version": "5.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2020-11-19T10:50:03.939768Z",
      "credit": [
        "Zhuonan li"
      ],
      "cvssScore": 4.4,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Open Redirect. It is possible to maliciously craft links can only be reasonably made for known notebook server hosts. This could be used to redirect to a spoofed server on the public internet.\n## Remediation\nUpgrade `notebook` to version 6.1.5 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820)\n",
      "disclosureTime": "2020-11-18T21:06:36Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.1.5"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-1041707",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "GHSA": [
          "GHSA-c7vm-f5p4-8fqh"
        ],
        "CVE": [
          "CVE-2020-26215"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-19T16:57:26.581842Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-19T16:57:26.579857Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:07:50.088037Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.1.5)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-07T07:06:02.623049Z",
      "credit": [
        "Piyush Jain (@3coins)"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Information Exposure by storing sensitive authentication cookies and other header values whenever an HTTP 5XX error is triggered in the server logs by default.\n## Remediation\nUpgrade `notebook` to version 6.4.10 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e)\n",
      "disclosureTime": "2022-04-05T17:47:26Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.10"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2441824",
      "identifiers": {
        "CWE": [
          "CWE-532"
        ],
        "GHSA": [
          "GHSA-m87f-39q9-6f55"
        ],
        "CVE": [
          "CVE-2022-24758"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-04-07T14:22:19.899796Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-07T14:22:19.898088Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-04-09T01:11:32.935103Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.10)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-06-17T07:14:27.523699Z",
      "credit": [
        "rashley-iqt"
      ],
      "cvssScore": 4.7,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. When a fully authenticated request is sent to the notebook server which is configured with `ContentsManager.allow_hidden = False`, it is possible to access arbitrary hidden files or arbitrary files in hidden directories.\r\n\r\n\r\n## Workarounds:\r\n\r\n1) Do not run the notebook server in a directory with hidden files, use subdirectories.\r\n\r\n2) Use a custom `ContentsManager` with additional checks for `self.is_hidden(path)` prior to completing actions.\n## Remediation\nUpgrade `notebook` to version 6.4.12 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977)\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08)\n",
      "disclosureTime": "2022-06-16T23:10:10Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.12"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2928995",
      "identifiers": {
        "CWE": [
          "CWE-284"
        ],
        "GHSA": [
          "GHSA-v7vq-3x77-87vg"
        ],
        "CVE": [
          "CVE-2022-29238"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-06-17T18:23:11.930424Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-17T18:23:11.928616Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
          "cvssV3BaseScore": 4.3,
          "severity": "medium",
          "modificationTime": "2022-06-25T01:10:29.226622Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.12)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2020-11-19T10:50:03.939768Z",
      "credit": [
        "Zhuonan li"
      ],
      "cvssScore": 4.4,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Open Redirect. It is possible to maliciously craft links can only be reasonably made for known notebook server hosts. This could be used to redirect to a spoofed server on the public internet.\n## Remediation\nUpgrade `notebook` to version 6.1.5 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820)\n",
      "disclosureTime": "2020-11-18T21:06:36Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.1.5"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-1041707",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "GHSA": [
          "GHSA-c7vm-f5p4-8fqh"
        ],
        "CVE": [
          "CVE-2020-26215"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-19T16:57:26.581842Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-19T16:57:26.579857Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:07:50.088037Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.1.5)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-07T07:06:02.623049Z",
      "credit": [
        "Piyush Jain (@3coins)"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Information Exposure by storing sensitive authentication cookies and other header values whenever an HTTP 5XX error is triggered in the server logs by default.\n## Remediation\nUpgrade `notebook` to version 6.4.10 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e)\n",
      "disclosureTime": "2022-04-05T17:47:26Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.10"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2441824",
      "identifiers": {
        "CWE": [
          "CWE-532"
        ],
        "GHSA": [
          "GHSA-m87f-39q9-6f55"
        ],
        "CVE": [
          "CVE-2022-24758"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-04-07T14:22:19.899796Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-07T14:22:19.898088Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-04-09T01:11:32.935103Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.10)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-06-17T07:14:27.523699Z",
      "credit": [
        "rashley-iqt"
      ],
      "cvssScore": 4.7,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. When a fully authenticated request is sent to the notebook server which is configured with `ContentsManager.allow_hidden = False`, it is possible to access arbitrary hidden files or arbitrary files in hidden directories.\r\n\r\n\r\n## Workarounds:\r\n\r\n1) Do not run the notebook server in a directory with hidden files, use subdirectories.\r\n\r\n2) Use a custom `ContentsManager` with additional checks for `self.is_hidden(path)` prior to completing actions.\n## Remediation\nUpgrade `notebook` to version 6.4.12 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977)\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08)\n",
      "disclosureTime": "2022-06-16T23:10:10Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.12"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2928995",
      "identifiers": {
        "CWE": [
          "CWE-284"
        ],
        "GHSA": [
          "GHSA-v7vq-3x77-87vg"
        ],
        "CVE": [
          "CVE-2022-29238"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-06-17T18:23:11.930424Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-17T18:23:11.928616Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
          "cvssV3BaseScore": 4.3,
          "severity": "medium",
          "modificationTime": "2022-06-25T01:10:29.226622Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.12)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2020-11-19T10:50:03.939768Z",
      "credit": [
        "Zhuonan li"
      ],
      "cvssScore": 4.4,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Open Redirect. It is possible to maliciously craft links can only be reasonably made for known notebook server hosts. This could be used to redirect to a spoofed server on the public internet.\n## Remediation\nUpgrade `notebook` to version 6.1.5 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820)\n",
      "disclosureTime": "2020-11-18T21:06:36Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.1.5"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-1041707",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "GHSA": [
          "GHSA-c7vm-f5p4-8fqh"
        ],
        "CVE": [
          "CVE-2020-26215"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2020-11-19T16:57:26.581842Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-19T16:57:26.579857Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:07:50.088037Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.1.5)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-07T07:06:02.623049Z",
      "credit": [
        "Piyush Jain (@3coins)"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Information Exposure by storing sensitive authentication cookies and other header values whenever an HTTP 5XX error is triggered in the server logs by default.\n## Remediation\nUpgrade `notebook` to version 6.4.10 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e)\n",
      "disclosureTime": "2022-04-05T17:47:26Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.10"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2441824",
      "identifiers": {
        "CWE": [
          "CWE-532"
        ],
        "GHSA": [
          "GHSA-m87f-39q9-6f55"
        ],
        "CVE": [
          "CVE-2022-24758"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-04-07T14:22:19.899796Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-07T14:22:19.898088Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-04-09T01:11:32.935103Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.10)"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-06-17T07:14:27.523699Z",
      "credit": [
        "rashley-iqt"
      ],
      "cvssScore": 4.7,
      "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. When a fully authenticated request is sent to the notebook server which is configured with `ContentsManager.allow_hidden = False`, it is possible to access arbitrary hidden files or arbitrary files in hidden directories.\r\n\r\n\r\n## Workarounds:\r\n\r\n1) Do not run the notebook server in a directory with hidden files, use subdirectories.\r\n\r\n2) Use a custom `ContentsManager` with additional checks for `self.is_hidden(path)` prior to completing actions.\n## Remediation\nUpgrade `notebook` to version 6.4.12 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977)\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08)\n",
      "disclosureTime": "2022-06-16T23:10:10Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.4.12"
      ],
      "id": "SNYK-PYTHON-NOTEBOOK-2928995",
      "identifiers": {
        "CWE": [
          "CWE-284"
        ],
        "GHSA": [
          "GHSA-v7vq-3x77-87vg"
        ],
        "CVE": [
          "CVE-2022-29238"
        ]
      },
      "language": "python",
      "malicious": false,
      "modificationTime": "2022-06-17T18:23:11.930424Z",
      "moduleName": "notebook",
      "packageManager": "pip",
      "packageName": "notebook",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-17T18:23:11.928616Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
          "cvssV3BaseScore": 4.3,
          "severity": "medium",
          "modificationTime": "2022-06-25T01:10:29.226622Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "[,6.4.12)"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "jupyter@1.0.0",
        "ipywidgets@7.4.2",
        "widgetsnbextension@3.4.2",
        "notebook@5.7.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notebook",
      "version": "5.7.15"
    },
    {
      "id": "snyk:lic:pip:certifi:MPL-2.0",
      "packageName": "certifi",
      "semver": {
        "vulnerable": [
          "[2017.7.27.1,)"
        ]
      },
      "creationTime": "2022-08-24T20:24:57.676Z",
      "description": "MPL-2.0 license",
      "language": "python",
      "license": "MPL-2.0",
      "packageManager": "pip",
      "publicationTime": "2022-08-24T20:24:57.676Z",
      "title": "MPL-2.0 license",
      "type": "license",
      "severity": "medium",
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "certifi@2018.8.24"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "certifi",
      "version": "2018.8.24"
    },
    {
      "id": "snyk:lic:pip:chardet:LGPL-2.1",
      "packageName": "chardet",
      "semver": {
        "vulnerable": [
          "[0,)"
        ]
      },
      "creationTime": "2022-08-24T20:30:42.793Z",
      "description": "LGPL-2.1 license",
      "language": "python",
      "license": "LGPL-2.1",
      "packageManager": "pip",
      "publicationTime": "2022-08-24T20:30:42.793Z",
      "title": "LGPL-2.1 license",
      "type": "license",
      "severity": "medium",
      "severityWithCritical": "medium",
      "from": [
        "pip-sample@0.0.0",
        "chardet@3.0.4"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "chardet",
      "version": "3.0.4"
    }
  ],
  "ok": false,
  "dependencyCount": 61,
  "org": "demo-org-rk0",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "pip",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "69 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2021-02-03T12:21:20.785239Z",
        "credit": [
          "Yaniv Nizry",
          "Michał Bentkowski"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A mutation XSS affects users calling `bleach.clean` when `svg` or `math`, `p` or `br` , and `style` are in the allowed tags, and the keyword argument is set `strip_comments=False`\r\n\r\nNote: none of the above tags are in the default allowed tags and `strip_comments` is set to `True` by default.\r\n\r\n### Workarounds\r\n\r\nmodify `bleach.clean` calls to either not allow the `style` tag, not allow `svg` or `math` tags, not allow `p` or `br` tags, and/or set `strip_comments=True`\r\n\r\nA strong [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) without `unsafe-inline` and `unsafe-eval` [`script-src`s](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)) will also help mitigate the risk.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13)\n- [Mutation XSS](https://cure53.de/fp170.pdf)\n- [RedHat Bugzilla Bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1689399)\n",
        "disclosureTime": "2021-02-02T17:58:40Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.3.0"
        ],
        "id": "SNYK-PYTHON-BLEACH-1069893",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-vv2x-vrpj-qqpq"
          ],
          "CVE": [
            "CVE-2021-23980"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2021-03-31T09:49:55.322672Z",
        "moduleName": "bleach",
        "packageManager": "pip",
        "packageName": "bleach",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-03T16:55:13Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13"
          },
          {
            "title": "Mutation XSS",
            "url": "https://cure53.de/fp170.pdf"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1689399"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.3.0)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "bleach@2.1.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "bleach",
        "version": "2.1.4",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-02-25T12:46:51.433615Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia calling `bleach.clean` with `noscript` and a raw tag in the allowed/whitelisted tags option.\n\n##Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.1 or higher.\n\n\n## References\n\n- [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1615315)\n\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351)\n\n- [mXSS Research Paper](https://cure53.de/fp170.pdf)\n",
        "disclosureTime": "2020-02-19T12:49:40Z",
        "exploit": "Unproven",
        "functions": [],
        "fixedIn": [
          "3.1.1"
        ],
        "id": "SNYK-PYTHON-BLEACH-552160",
        "identifiers": {
          "CWE": [
            "CWE-89"
          ],
          "GHSA": [
            "GHSA-q65m-pv3f-wr5r"
          ],
          "CVE": [
            "CVE-2020-6802"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2020-03-25T08:14:32.725430Z",
        "moduleName": "bleach",
        "packageManager": "pip",
        "packageName": "bleach",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-02-25T12:50:05Z",
        "references": [
          {
            "title": "Bugzilla",
            "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1615315"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mozilla/bleach/commit/996cde7a2439a2323f9c4b2567c8b8449d393351"
          },
          {
            "title": "mXSS Research Paper",
            "url": "https://cure53.de/fp170.pdf"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T18:10:14.113830Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.1.1)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "bleach@2.1.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "bleach",
        "version": "2.1.4",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2020-03-25T08:20:23.728137Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in `bleach.clean` when `RCDATA` and either `svg` or math tags are whitelisted and the keyword argument strip=`False`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bleach` to version 3.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9)\n- [PoC](https://youtu.be/lNB20mb3OXk?t=947)\n",
        "disclosureTime": "2020-03-25T08:20:21Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.1.2"
        ],
        "id": "SNYK-PYTHON-BLEACH-561119",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-m6xf-fq7q-8743"
          ],
          "CVE": [
            "CVE-2020-6816"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2020-11-22T13:32:04.003890Z",
        "moduleName": "bleach",
        "packageManager": "pip",
        "packageName": "bleach",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-25T09:23:03Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mozilla/bleach/commit/e4e9e21e7aebff40c88fafa4319bba4636a602d9"
          },
          {
            "title": "PoC",
            "url": "https://youtu.be/lNB20mb3OXk?t=947"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T18:10:46.290799Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.1.2)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "bleach@2.1.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "bleach",
        "version": "2.1.4",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-31T14:21:33.630126Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[bleach](https://github.com/mozilla/bleach) is a whitlist-based HTML sanitizing library that escapes or strips markup and attributes.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nCalls to `bleach.clean` with an allowed tag and style attribute are vulnerable to ReDoS. For example, `bleach.clean(..., attributes={'a': ['style']})`.\n\n## Details:\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `bleach` to version 3.1.4 or higher.\n\n\n## References\n\n- [GItHub Commit](https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69)\n\n- [Release Notes](https://github.com/mozilla/bleach/releases/tag/v3.1.4)\n",
        "disclosureTime": "2020-03-31T06:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.1.4"
        ],
        "id": "SNYK-PYTHON-BLEACH-561754",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vqhp-cxgc-6wmm"
          ],
          "CVE": [
            "CVE-2020-6817"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2020-03-31T15:17:42.856112Z",
        "moduleName": "bleach",
        "packageManager": "pip",
        "packageName": "bleach",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-31T15:17:42.854616Z",
        "references": [
          {
            "title": "GItHub Commit",
            "url": "https://github.com/mozilla/bleach/commit/d6018f2539d271963c3e7f54f36ef11900363c69"
          },
          {
            "title": "Release Notes",
            "url": "https://github.com/mozilla/bleach/releases/tag/v3.1.4"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.1.4)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "bleach@2.1.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "bleach",
        "version": "2.1.4",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2022-01-20T13:49:08.236926Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.2,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution by not properly managing cross-user temporary files. This vulnerability allows one user to run code as another on the same machine.\n## Remediation\nUpgrade `ipython` to version 7.16.3, 7.31.1, 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668)\n- [IPython Release Notes](https://ipython.readthedocs.io/en/stable/whatsnew/version8.html#ipython-8-0-1-cve-2022-21699)\n",
        "disclosureTime": "2022-01-20T11:03:37Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "7.16.3",
          "7.31.1",
          "8.0.1"
        ],
        "id": "SNYK-PYTHON-IPYTHON-2348630",
        "identifiers": {
          "CWE": [
            "CWE-250",
            "CWE-279"
          ],
          "GHSA": [
            "GHSA-pq7m-3gw7-gq5x"
          ],
          "CVE": [
            "CVE-2022-21699"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-01-20T16:20:34.775372Z",
        "moduleName": "ipython",
        "packageManager": "pip",
        "packageName": "ipython",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-20T16:20:34.772251Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ipython/ipython/commit/46a51ed69cdf41b4333943d9ceeb945c4ede5668"
          },
          {
            "title": "IPython Release Notes",
            "url": "https://ipython.readthedocs.io/en/stable/whatsnew/version8.html%23ipython-8-0-1-cve-2022-21699"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Execution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "severity": "high",
            "modificationTime": "2022-03-26T01:11:09.713833Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[, 7.16.3)",
            "[7.17.0, 7.31.1)",
            "[8.0.0, 8.0.1)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "ipykernel@5.0.0",
          "ipython@7.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "ipython",
        "version": "7.19.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-09-25T17:30:26.286074Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation.\r\n\r\nThis issue can be mitigated by using Markdown to format user content instead of the urlize filter, or by implementing request timeouts or limiting process memory.\r\n\r\n### PoC by Yeting Li\r\n```\r\nfrom jinja2.utils import urlize\r\nfrom time import perf_counter\r\n\r\nfor i in range(3):\r\n    text = \"abc@\" + \".\" * (i+1)*5000 + \"!\"\r\n    LEN = len(text)\r\n    BEGIN = perf_counter()\r\n    urlize(text)\r\n    DURATION = perf_counter() - BEGIN\r\n    print(f\"{LEN}: took {DURATION} seconds!\")\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Jinja2` to version 2.11.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py#L20)\n- [GitHub PR](https://github.com/pallets/jinja/pull/1343)\n",
        "disclosureTime": "2020-09-25T17:29:19Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.11.3"
        ],
        "id": "SNYK-PYTHON-JINJA2-1012994",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-g3rq-g295-4j3m"
          ],
          "CVE": [
            "CVE-2020-28493"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2021-03-21T14:24:36.107041Z",
        "moduleName": "jinja2",
        "packageManager": "pip",
        "packageName": "jinja2",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-01T19:52:17Z",
        "references": [
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/pallets/jinja/blob/ab81fd9c277900c85da0c322a2ff9d68a235b2e6/src/jinja2/utils.py%23L20"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/pallets/jinja/pull/1343"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-06-16T10:16:22.250265Z"
          },
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-05-03T22:33:08.900704Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-04-09T01:11:30.794115Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,2.11.3)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "jinja2@2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "jinja2",
        "version": "2.10",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-04-07T10:24:16.310959Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6,
        "description": "## Overview\n[Jinja2](https://pypi.org/project/Jinja2/) is a template engine written in pure Python. It provides a Django inspired non-XML syntax but supports inline expressions and an optional sandboxed environment.\n\nAffected versions of this package are vulnerable to Sandbox Escape via the `str.format_map`.\n## Remediation\nUpgrade `Jinja2` to version 2.10.1 or higher.\n## References\n- [Release Notes](https://palletsprojects.com/blog/jinja-2-10-1-released)\n",
        "disclosureTime": "2019-04-07T00:42:43Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.10.1"
        ],
        "id": "SNYK-PYTHON-JINJA2-174126",
        "identifiers": {
          "CWE": [
            "CWE-265"
          ],
          "CVE": [
            "CVE-2019-10906"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:53.288704Z",
        "moduleName": "jinja2",
        "packageManager": "pip",
        "packageName": "jinja2",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-07T00:42:43Z",
        "references": [
          {
            "title": "Release Notes",
            "url": "https://palletsprojects.com/blog/jinja-2-10-1-released"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Sandbox Escape",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
            "cvssV3BaseScore": 8.1,
            "severity": "high",
            "modificationTime": "2022-05-04T00:39:31.724880Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
            "cvssV3BaseScore": 9,
            "severity": "critical",
            "modificationTime": "2022-05-31T20:10:02.225006Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
            "cvssV3BaseScore": 8.6,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:56.041656Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,2.10.1)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "jinja2@2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "jinja2",
        "version": "2.10",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2022-07-04T10:34:28.640492Z",
        "credit": [
          "unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `ASTERISK_EMPHASIS` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mistune` to version 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2)\n",
        "disclosureTime": "2022-07-04T10:31:50Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.3"
        ],
        "id": "SNYK-PYTHON-MISTUNE-2940625",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2022-34749"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-07-04T16:13:03.320562Z",
        "moduleName": "mistune",
        "packageManager": "pip",
        "packageName": "mistune",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-07-04T16:13:03.318906Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-08-03T01:10:21.836125Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,2.0.3)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1",
          "mistune@0.8.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "mistune",
        "version": "0.8.4",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-08-11T09:32:37.687900Z",
        "credit": [
          "Alvaro Muñoz"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker can inject arbitrary HTML when generating HTML from a crafted notebook. The vulnerable points are:\r\n\r\nthe field \r\n\r\n- `notebook.metadata.language_info.pygments_lexer` \r\n\r\nthe nodes \r\n\r\n- `notebook.metadata.title` \r\n- `notebook.metadata.widgets` \r\n- `notebook.cell.metadata.tags` \r\n- `notebook.cell.output.svg_filename` \r\n- `output.metadata.filenames`\r\n- `cell.output.metadata.width`\r\n- `cell.output.metadata.height`\r\n\r\nand output data of the cells \r\n\r\n- `text/html`\r\n- `image/svg+xml`\r\n- `text/markdown`\r\n- `application/javascript`\r\n- `cell.output.data[\"images/png\"]` \r\n- `cell.output.data[\"images/jpeg\"]`\r\n- `output.metadata.filenames['image/png']`\r\n- `output.metadata.filenames['image/jpeg']`\r\n- `application/vnd.jupyter.widget-state+json`\r\n- `application/vnd.jupyter.widget-view+json`\r\n- `raw` type\r\n- `markdown` type\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `nbconvert` to version 6.3.0b0 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557)\n",
        "disclosureTime": "2022-08-10T17:51:53Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "6.3.0b0"
        ],
        "id": "SNYK-PYTHON-NBCONVERT-2979829",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-9jmq-rx5f-8jwq"
          ],
          "CVE": [
            "CVE-2021-32862"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-08-11T14:26:06.225922Z",
        "moduleName": "nbconvert",
        "packageManager": "pip",
        "packageName": "nbconvert",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-08-11T14:26:06.224202Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jupyter/nbconvert/commit/5d2c5e2b79534c11678b73e707feb74d7827a557"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 5.4,
            "severity": "medium",
            "modificationTime": "2022-08-20T13:10:39.549285Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,6.3.0b0)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15",
          "nbconvert@5.6.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "nbconvert",
        "version": "5.6.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2020-11-19T10:50:03.939768Z",
        "credit": [
          "Zhuonan li"
        ],
        "cvssScore": 4.4,
        "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Open Redirect. It is possible to maliciously craft links can only be reasonably made for known notebook server hosts. This could be used to redirect to a spoofed server on the public internet.\n## Remediation\nUpgrade `notebook` to version 6.1.5 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820)\n",
        "disclosureTime": "2020-11-18T21:06:36Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "6.1.5"
        ],
        "id": "SNYK-PYTHON-NOTEBOOK-1041707",
        "identifiers": {
          "CWE": [
            "CWE-601"
          ],
          "GHSA": [
            "GHSA-c7vm-f5p4-8fqh"
          ],
          "CVE": [
            "CVE-2020-26215"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2020-11-19T16:57:26.581842Z",
        "moduleName": "notebook",
        "packageManager": "pip",
        "packageName": "notebook",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-19T16:57:26.579857Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jupyter/notebook/commit/32bd47068bcd042e7a76f46f3be44d9a59143820"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Open Redirect",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T18:07:50.088037Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,6.1.5)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "notebook",
        "version": "5.7.15",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-04-07T07:06:02.623049Z",
        "credit": [
          "Piyush Jain (@3coins)"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Information Exposure by storing sensitive authentication cookies and other header values whenever an HTTP 5XX error is triggered in the server logs by default.\n## Remediation\nUpgrade `notebook` to version 6.4.10 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e)\n",
        "disclosureTime": "2022-04-05T17:47:26Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "6.4.10"
        ],
        "id": "SNYK-PYTHON-NOTEBOOK-2441824",
        "identifiers": {
          "CWE": [
            "CWE-532"
          ],
          "GHSA": [
            "GHSA-m87f-39q9-6f55"
          ],
          "CVE": [
            "CVE-2022-24758"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-04-07T14:22:19.899796Z",
        "moduleName": "notebook",
        "packageManager": "pip",
        "packageName": "notebook",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-07T14:22:19.898088Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jupyter/notebook/commit/c219ce43c1ea25123fa70d264e7735bdf4585b1e"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-04-09T01:11:32.935103Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,6.4.10)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "notebook",
        "version": "5.7.15",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-06-17T07:14:27.523699Z",
        "credit": [
          "rashley-iqt"
        ],
        "cvssScore": 4.7,
        "description": "## Overview\n[notebook](https://pypi.org/project/notebook/) is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. When a fully authenticated request is sent to the notebook server which is configured with `ContentsManager.allow_hidden = False`, it is possible to access arbitrary hidden files or arbitrary files in hidden directories.\r\n\r\n\r\n## Workarounds:\r\n\r\n1) Do not run the notebook server in a directory with hidden files, use subdirectories.\r\n\r\n2) Use a custom `ContentsManager` with additional checks for `self.is_hidden(path)` prior to completing actions.\n## Remediation\nUpgrade `notebook` to version 6.4.12 or higher.\n## References\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977)\n- [GitHub Commit](https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08)\n",
        "disclosureTime": "2022-06-16T23:10:10Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "6.4.12"
        ],
        "id": "SNYK-PYTHON-NOTEBOOK-2928995",
        "identifiers": {
          "CWE": [
            "CWE-284"
          ],
          "GHSA": [
            "GHSA-v7vq-3x77-87vg"
          ],
          "CVE": [
            "CVE-2022-29238"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-06-17T18:23:11.930424Z",
        "moduleName": "notebook",
        "packageManager": "pip",
        "packageName": "notebook",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-06-17T18:23:11.928616Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jupyter/notebook/commit/2a76184f46ed6a7afcdd01e9ba660010abb9c977"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jupyter/notebook/commit/a161ffac6bfff2491fe5c4e9f6111256b8b57f08"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Access Restriction Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "cvssV3BaseScore": 4.3,
            "severity": "medium",
            "modificationTime": "2022-06-25T01:10:29.226622Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,6.4.12)"
          ]
        },
        "from": [
          "pip-sample@0.0.0",
          "jupyter@1.0.0",
          "ipywidgets@7.4.2",
          "widgetsnbextension@3.4.2",
          "notebook@5.7.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": true,
        "isRuntime": false,
        "name": "notebook",
        "version": "5.7.15",
        "severityWithCritical": "medium"
      },
      {
        "id": "snyk:lic:pip:certifi:MPL-2.0",
        "packageName": "certifi",
        "semver": {
          "vulnerable": [
            "[2017.7.27.1,)"
          ]
        },
        "creationTime": "2022-08-24T20:24:57.676Z",
        "description": "MPL-2.0 license",
        "language": "python",
        "license": "MPL-2.0",
        "packageManager": "pip",
        "publicationTime": "2022-08-24T20:24:57.676Z",
        "title": "MPL-2.0 license",
        "type": "license",
        "severity": "medium",
        "from": [
          "pip-sample@0.0.0",
          "certifi@2018.8.24"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "certifi",
        "version": "2018.8.24",
        "severityWithCritical": "medium"
      },
      {
        "id": "snyk:lic:pip:chardet:LGPL-2.1",
        "packageName": "chardet",
        "semver": {
          "vulnerable": [
            "[0,)"
          ]
        },
        "creationTime": "2022-08-24T20:30:42.793Z",
        "description": "LGPL-2.1 license",
        "language": "python",
        "license": "LGPL-2.1",
        "packageManager": "pip",
        "publicationTime": "2022-08-24T20:30:42.793Z",
        "title": "LGPL-2.1 license",
        "type": "license",
        "severity": "medium",
        "from": [
          "pip-sample@0.0.0",
          "chardet@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "chardet",
        "version": "3.0.4",
        "severityWithCritical": "medium"
      }
    ],
    "upgrade": {},
    "patch": {},
    "ignore": {},
    "pin": {
      "bleach@2.1.4": {
        "upgradeTo": "bleach@3.3.0",
        "vulns": [
          "SNYK-PYTHON-BLEACH-1069893",
          "SNYK-PYTHON-BLEACH-552160",
          "SNYK-PYTHON-BLEACH-561119",
          "SNYK-PYTHON-BLEACH-561754"
        ],
        "isTransitive": false
      },
      "ipython@7.19.0": {
        "upgradeTo": "ipython@7.31.1",
        "vulns": [
          "SNYK-PYTHON-IPYTHON-2348630"
        ],
        "isTransitive": true
      },
      "jinja2@2.10": {
        "upgradeTo": "jinja2@2.11.3",
        "vulns": [
          "SNYK-PYTHON-JINJA2-1012994",
          "SNYK-PYTHON-JINJA2-174126"
        ],
        "isTransitive": false
      },
      "mistune@0.8.4": {
        "upgradeTo": "mistune@2.0.3",
        "vulns": [
          "SNYK-PYTHON-MISTUNE-2940625"
        ],
        "isTransitive": true
      },
      "nbconvert@5.6.1": {
        "upgradeTo": "nbconvert@6.3.0b0",
        "vulns": [
          "SNYK-PYTHON-NBCONVERT-2979829"
        ],
        "isTransitive": true
      },
      "notebook@5.7.15": {
        "upgradeTo": "notebook@6.4.12",
        "vulns": [
          "SNYK-PYTHON-NOTEBOOK-1041707",
          "SNYK-PYTHON-NOTEBOOK-2441824",
          "SNYK-PYTHON-NOTEBOOK-2928995"
        ],
        "isTransitive": true
      }
    }
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 14,
  "projectName": "pip-sample",
  "displayTargetFile": "pip-sample/requirements.txt",
  "path": "/Python-goof"
}
